import { useEffect, useState } from "react";
import axios from "axios";

export default function StorageUnits() {
  const initialFormState = { unit_id: "", size: "", price: "", occupied: false };
  const [units, setUnits] = useState([]);
  const [form, setForm] = useState(initialFormState);
  const [errorMessage, setErrorMessage] = useState("");
  const [editMode, setEditMode] = useState(false);

  useEffect(() => {
    fetchUnits();
  }, []);

  const fetchUnits = async () => {
    try {
      const response = await axios.get("http://localhost:8000/units/");
      setUnits(response.data);
      setErrorMessage("");
    } catch (error) {
      console.error("Error fetching units", error);
      setErrorMessage("Failed to fetch units. Please try again later.");
    }
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!form.unit_id || !form.size || !form.price) {
      setErrorMessage("All fields are required.");
      return;
    }
    if (!editMode && units.some((unit) => unit.unit_id === parseInt(form.unit_id))) {
      setErrorMessage("Unit ID already exists. Please choose a different one.");
      return;
    }
    try {
      if (editMode) {
        await axios.put(`http://localhost:8000/units/${form.unit_id}`, form);
      } else {
        await axios.post("http://localhost:8000/units/", {
          ...form,
          unit_id: parseInt(form.unit_id),
          price: parseFloat(form.price),
        });
      }
      fetchUnits();
      setForm(initialFormState);
      setEditMode(false);
      setErrorMessage("");
    } catch (error) {
      console.error("Error saving unit", error);
      setErrorMessage("Failed to save unit. Please try again.");
    }
  };

  const handleEdit = (unit) => {
    setForm(unit);
    setEditMode(true);
  };

  const handleDelete = async (unitId) => {
    try {
      await axios.delete(`http://localhost:8000/units/${unitId}`);
      fetchUnits();
    } catch (error) {
      console.error("Error deleting unit", error);
      setErrorMessage("Failed to delete unit. Please try again.");
    }
  };

  return (
    <div className="p-4 max-w-xl mx-auto bg-white shadow-md rounded-lg">
      <h1 className="text-2xl font-bold text-center mb-4">Storage Units</h1>
      {errorMessage && <p className="text-red-500 text-center">{errorMessage}</p>}
      <form onSubmit={handleSubmit} className="my-4 flex flex-col gap-2">
        <input type="number" name="unit_id" value={form.unit_id} onChange={handleChange} placeholder="Unit ID" className="border p-2 rounded" required />
        <input type="text" name="size" value={form.size} onChange={handleChange} placeholder="Size" className="border p-2 rounded" required />
        <input type="number" step="0.01" name="price" value={form.price} onChange={handleChange} placeholder="Price" className="border p-2 rounded" required />
        <button type="submit" className="bg-blue-500 text-white p-2 rounded">{editMode ? "Update Unit" : "Add Unit"}</button>
      </form>
      <ul className="space-y-2">
        {units.map((unit) => (
          <li key={unit.unit_id} className="border p-3 rounded-lg flex justify-between items-center">
            <span>{unit.unit_id} - {unit.size} - ${unit.price} - {unit.occupied ? "Occupied" : "Available"}</span>
            <div>
              <button onClick={() => handleEdit(unit)} className="bg-yellow-500 text-white px-2 py-1 rounded mr-2">Edit</button>
              <button onClick={() => handleDelete(unit.unit_id)} className="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

